{"version":3,"sources":["redux/app/actions.ts","redux/app/reducer.ts","redux/firebase.ts","redux/users/api.ts","redux/app/selectors.ts","redux/users/fetchHandler.ts","redux/users/actions.ts","redux/users/reducer.ts","redux/store.ts","redux/users/selectors.ts","components/UserForm.tsx","components/User.tsx","components/UserList.tsx","components/Header/Header.tsx","Main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["appActionTypes","_setFetching","key","status","type","_setError","message","initialState","isFetching","error","appReducer","state","action","newState","require","firebase","initializeApp","apiKey","process","authDomain","projectId","db","firestore","usersAPI","getUsers","a","res","collection","get","forEach","doc","id","user","data","push","addUser","toSend","name","phone","surname","add","updateUser","set","deleteUser","userId","delete","selectFetchingByKey","app","selectErrorByKey","fetchHandler","callback","dispatch","getState","batch","response","console","log","content","usersActionTypes","_deleteUserSuccess","newUserId","newUser","users","usersIds","editingUserId","usersReducer","idsArr","d","filter","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","selectUserByKey","selectIsEditing","UserForm","useDispatch","className","initialValues","onFinish","values","onUserUpdate","onFinishFailed","errorInfo","Item","rules","required","placeholder","htmlType","User","useSelector","isEditing","setEditing","useCallback","deleteItem","onUserDelete","CloseCircleOutlined","onClick","UserOutlined","onDoubleClick","style","margin","DeleteOutlined","color","UserList","userIds","padding","map","Header","extra","to","backgroundColor","React","Main","props","mounted","this","fetchUsers","exact","path","render","component","Component","ComposedComponent","connect","withRouter","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29135086.chunk.js","sourcesContent":["import {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppActionsType, GetStateType} from \"../store\";\r\n\r\nexport const appActionTypes:{\r\n    SET_IS_FETCHING: 'app/SET_IS_FETCHING'\r\n    SET_ERROR: 'app/SET_ERROR'\r\n} = {\r\n    SET_IS_FETCHING: 'app/SET_IS_FETCHING',\r\n    SET_ERROR: 'app/SET_ERROR'\r\n};\r\n\r\nexport type I_appActions =\r\n    I_setFetching | I_setError\r\n\r\n//interfaces\r\ninterface I_setFetching {\r\n    type: typeof appActionTypes.SET_IS_FETCHING,\r\n    key: string\r\n    status: boolean\r\n}\r\n\r\ninterface I_setError {\r\n    type: typeof appActionTypes.SET_ERROR,\r\n    key: string\r\n    message: null | string\r\n}\r\n\r\n\r\n\r\n\r\n//Internal ACTIONS CREATORS\r\nexport const _setFetching = (key: string, status: boolean): I_setFetching =>\r\n    ({ type: appActionTypes.SET_IS_FETCHING, key, status});\r\n\r\nexport const _setError = ( key: string, message: string | null): I_setError =>\r\n    ({ type: appActionTypes.SET_ERROR, key, message});\r\n\r\n//EXTERNAL ACTIONS\r\nexport const fetchAll = () =>\r\n    async (dispatch: ThunkDispatch<{}, {}, AppActionsType>) => {\r\n        setTimeout(async () => {\r\n                await Promise.all([dispatch(fetchData())]);\r\n            dispatch(_setError('fetchAll',null));\r\n        }, 1000)\r\n    };\r\n\r\n\r\n//API ACTIONS\r\nexport const fetchData = () =>\r\n    async (dispatch: ThunkDispatch<{}, {}, I_appActions>) => {\r\n        try {\r\n            dispatch(_setFetching('fetchData', true));\r\n            await new Promise((resolve)=>{resolve('asd')});\r\n            dispatch(_setFetching('fetchData', false));\r\n        } catch (err) {\r\n            console.log(err);\r\n            //if its no data return\r\n            if (err.response && err.response.config.url === \"api.user.getstate\" && err.response.status === 403) {\r\n                dispatch(_setFetching('fetchData', false));\r\n                dispatch(_setError('fetchData',null));\r\n            } else {\r\n                dispatch(_setError('fetchData','network Problems'));\r\n                dispatch(_setFetching('fetchData', false));\r\n            }\r\n        }\r\n    };","import {\r\n    appActionTypes\r\n} from \"./actions\";\r\nimport {I_appState} from \"../../types/app-types\";\r\nimport {AppActionsType} from \"../store\";\r\n\r\nconst initialState: I_appState = {\r\n    isFetching: {},\r\n    error: {}\r\n};\r\n\r\n\r\nconst appReducer = (state: I_appState = initialState, action: AppActionsType) => {\r\n    switch (action.type) {\r\n        //setting fetching and frozen status\r\n        case appActionTypes.SET_IS_FETCHING: {\r\n            if (state.isFetching[action.key] && !action.status) {\r\n                let newState = {...state};\r\n                delete newState.isFetching[action.key];\r\n                return newState\r\n            }\r\n            if (!state.isFetching[action.key] && action.status) {\r\n                return {\r\n                    ...state,\r\n                    isFetching: {...state.isFetching, [action.key]: action.status},\r\n                };\r\n            }\r\n            else return state;\r\n        }\r\n        case appActionTypes.SET_ERROR: {\r\n            if (state.error[action.key] && !action.message) {\r\n                let newState = {...state};\r\n                delete newState.error[action.key];\r\n                return newState\r\n            }\r\n            if (action.message) {\r\n                return {\r\n                    ...state,\r\n                    error: {...state.error, [action.key]: {message: action.message}},\r\n                };\r\n            }\r\n            else return state;\r\n        }\r\n        //adding fetched data to state\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\nexport default appReducer;","import firebase from \"firebase\";\r\n// Required for side-effects\r\nrequire(\"firebase/firestore\");\r\n\r\nfirebase.initializeApp({\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID\r\n});\r\n\r\nconst db = firebase.firestore();\r\n\r\nexport default db;\r\n///    apiKey: \"AIzaSyCgj4ixMcBf3GkAKxEgc9nl3io8g0nVGEI\",\r\n//     authDomain: \"testing-fb-server.firebaseapp.com\",\r\n//     databaseURL: \"https://testing-fb-server-default-rtdb.europe-west1.firebasedatabase.app\",\r\n//     projectId: \"testing-fb-server\",\r\n//     storageBucket: \"testing-fb-server.appspot.com\",\r\n//     messagingSenderId: \"14880288862\",\r\n//     appId: \"1:14880288862:web:b6c15979007775b8b2c4cf\",\r\n//     measurementId: \"G-8KK072PRG9\"","import db from '../firebase';\r\nimport {I_user, I_userData} from \"../../types/user-types\";\r\nexport const usersAPI = {\r\n  getUsers: async (): Promise<never | I_user[]> => {\r\n    let res:I_user[] = [];\r\n    const snapshot = await  db.collection(\"users\").get();\r\n    snapshot.forEach((doc) => {\r\n      let id = doc.id;\r\n      let user = doc.data() as I_user;\r\n      res.push({...user, id});\r\n    });\r\n    return res;\r\n  },\r\n  async addUser(user: I_user): Promise<never | undefined | I_user> {\r\n    let toSend: I_userData = {\r\n      name: user.name,\r\n      phone: user.phone,\r\n      surname: 'surname',\r\n    };\r\n    const res = await db.collection(\"users\").add(toSend);\r\n    if (res && res.id) {\r\n      return {...toSend, id: res.id};\r\n    }\r\n  },\r\n  async updateUser(user: I_user): Promise<never | I_user> {\r\n    await db.collection(\"users\").doc(user.id).set(user);\r\n    return user;\r\n  },\r\n  async deleteUser(userId: string): Promise<never | boolean> {\r\n    await db.collection(\"users\").doc(userId).delete();\r\n    return true;\r\n  }\r\n};","import {AppStateType} from \"../store\";\r\n\r\nexport const selectFetchingByKey = (state: AppStateType, key: string): boolean =>\r\n  !!state.app.isFetching[key];\r\nexport const selectErrorByKey = (state: AppStateType, key: string): null | { message: string } =>\r\n  state.app.error[key] ? state.app.error[key] : null;\r\n","import {AppActionsType, GetStateType} from \"../store\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {selectFetchingByKey} from \"../app/selectors\";\r\nimport {batch} from \"react-redux\";\r\nimport {_setError, _setFetching} from \"../app/actions\";\r\nimport {message} from \"antd\";\r\n\r\nexport function fetchHandler(key: string, callback: (\r\n  dispatch: ThunkDispatch<{}, {}, AppActionsType>,\r\n  getState: GetStateType,\r\n  ) => Promise<boolean | undefined>) {\r\n  return async function (dispatch: ThunkDispatch<{}, {}, AppActionsType>, getState: GetStateType) {\r\n    try {\r\n      const loading = selectFetchingByKey(getState(), key);\r\n      if (!loading) {\r\n        batch(() => {\r\n          dispatch(_setError(key, null));\r\n          dispatch(_setFetching(key, true));\r\n        });\r\n        const response = await callback(dispatch, getState);\r\n        batch(() => {\r\n          dispatch(_setFetching(key, false));\r\n          if (!response) {\r\n            dispatch(_setError(key, 'Nothing Found'));\r\n          }\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n      const content = e.data?.message ? e.data?.message : 'Something went wrong. Try again later.';\r\n      message.error(content);\r\n      batch(() => {\r\n        dispatch(_setError(key, content));\r\n        dispatch(_setFetching(key, false));\r\n      });\r\n    }\r\n  };\r\n}\r\n","import {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppActionsType} from \"../store\";\r\nimport {I_user} from \"../../types/user-types\";\r\nimport {usersAPI} from \"./api\";\r\nimport {fetchHandler} from \"./fetchHandler\";\r\nimport {newUserId} from \"./reducer\";\r\n\r\nexport const usersActionTypes: {\r\n  SET_FETCHED_USERS: 'users/SET_FETCHED_USERS'\r\n  SET_EDITING_USER: 'users/SET_EDITING_USER'\r\n  UPDATE_USER_SUCCESS: 'users/UPDATE_USER_SUCCESS'\r\n  DELETE_USER_SUCCESS: 'users/DELETE_USER_SUCCESS'\r\n} = {\r\n  SET_FETCHED_USERS: 'users/SET_FETCHED_USERS',\r\n  SET_EDITING_USER: 'users/SET_EDITING_USER',\r\n  UPDATE_USER_SUCCESS: 'users/UPDATE_USER_SUCCESS',\r\n  DELETE_USER_SUCCESS: 'users/DELETE_USER_SUCCESS'\r\n};\r\n\r\nexport type I_usersActions = I_setFetchedUsers | I_setEditingUser | I_updateUserSuccess |\r\n  I_deleteUserSuccess\r\n\r\n//interfaces\r\ninterface I_setFetchedUsers {\r\n  type: typeof usersActionTypes.SET_FETCHED_USERS,\r\n  data: Array<I_user>\r\n}\r\ninterface I_setEditingUser {\r\n  type: typeof usersActionTypes.SET_EDITING_USER,\r\n  data: string | null\r\n}\r\ninterface I_updateUserSuccess {\r\n  type: typeof usersActionTypes.UPDATE_USER_SUCCESS,\r\n  data: I_user\r\n}\r\n\r\ninterface I_deleteUserSuccess {\r\n  type: typeof usersActionTypes.DELETE_USER_SUCCESS,\r\n  userId: string\r\n}\r\n\r\n//Internal ACTIONS CREATORS\r\nexport const setEditingUser = (data: string | null): I_setEditingUser =>\r\n  ({type: usersActionTypes.SET_EDITING_USER, data});\r\n\r\nexport const _updateUserSuccess = (data: I_user): I_updateUserSuccess =>\r\n  ({type: usersActionTypes.UPDATE_USER_SUCCESS, data});\r\n\r\nexport const _deleteUserSuccess = (userId: string): I_deleteUserSuccess =>\r\n  ({type: usersActionTypes.DELETE_USER_SUCCESS, userId});\r\n\r\nexport const _setFetchedUsers = (data: I_user[]): I_setFetchedUsers =>\r\n  ({type: usersActionTypes.SET_FETCHED_USERS, data});\r\n\r\n\r\n//API ACTIONS\r\nexport const fetchUsers = () =>\r\n  fetchHandler(\r\n    'fetchUsers',\r\n    async (dispatch: ThunkDispatch<{}, {}, AppActionsType>) => {\r\n      const res = await usersAPI.getUsers();\r\n      if (res) {\r\n        dispatch(_setFetchedUsers(res));\r\n        return true;\r\n      }\r\n  });\r\n\r\n\r\nexport const onUserUpdate = (user: I_user) =>\r\n  fetchHandler(\r\n    'user',\r\n    async (dispatch: ThunkDispatch<{}, {}, AppActionsType>) => {\r\n      let res;\r\n      if (user.id === newUserId) {\r\n        res = await usersAPI.addUser(user);\r\n      } else {\r\n        res = await usersAPI.updateUser(user);\r\n      }\r\n      if (res) {\r\n        dispatch(_updateUserSuccess(res));\r\n        return true;\r\n      }\r\n    });\r\n\r\nexport const onUserDelete = (userId: string) =>\r\n  fetchHandler(\r\n    'user',\r\n    async (dispatch: ThunkDispatch<{}, {}, AppActionsType>) => {\r\n      const res = await usersAPI.deleteUser(userId);\r\n      if (res) {\r\n        dispatch(_deleteUserSuccess(userId));\r\n        return true;\r\n      }\r\n    });","import {usersActionTypes} from \"./actions\";\r\nimport {I_usersState} from \"../../types/user-types\";\r\nimport {AppActionsType} from \"../store\";\r\n\r\nexport const newUserId = '_NEW_USER';\r\nexport const newUser = {\r\n  id: newUserId,\r\n  name: '',\r\n  surname: '',\r\n  phone: ''\r\n};\r\nconst initialState:I_usersState = {\r\n  users: {\r\n    [newUserId]: newUser\r\n  },\r\n  usersIds: [],\r\n  editingUserId: null\r\n};\r\n\r\nconst usersReducer = (state: I_usersState = initialState, action: AppActionsType): I_usersState => {\r\n  switch (action.type) {\r\n    //adding fetched data\r\n    case usersActionTypes.SET_FETCHED_USERS: {\r\n      let newState = {...state};\r\n      const idsArr: string[] = [];\r\n      action.data.forEach(d => {\r\n        newState.users[d.id] = d;\r\n        idsArr.push(d.id);\r\n      });\r\n      newState.usersIds = idsArr;\r\n      return newState;\r\n    }\r\n    case usersActionTypes.UPDATE_USER_SUCCESS: {\r\n      let newState = {...state};\r\n      if (state.users[action.data.id]) {\r\n        newState.users[action.data.id] = {\r\n          ...newState.users[action.data.id],\r\n          ...action.data\r\n        }\r\n      } else {\r\n        newState.usersIds = [...newState.usersIds, action.data.id];\r\n        newState.users[action.data.id] = action.data\r\n      }\r\n      if (state.editingUserId) {\r\n        newState.editingUserId = null;\r\n      }\r\n      return newState;\r\n    }\r\n    case usersActionTypes.DELETE_USER_SUCCESS: {\r\n      let newState = {...state};\r\n      delete newState.users[action.userId];\r\n      newState.usersIds = newState.usersIds.filter(id => id !== action.userId);\r\n      return newState;\r\n    }\r\n    case usersActionTypes.SET_EDITING_USER: {\r\n      return {\r\n        ...state,\r\n        editingUserId: action.data\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default usersReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport appReducer from \"./app/reducer\";\r\nimport usersReducer from \"./users/reducer\";\r\nimport {I_appActions} from \"./app/actions\";\r\nimport {I_usersActions} from \"./users/actions\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n  app: appReducer,\r\n  users: usersReducer,\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>;\r\nexport type AppActionsType = I_appActions | I_usersActions;\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type GetStateType = () => AppStateType\r\n\r\nexport default store;","import {AppStateType} from \"../store\";\r\nimport {I_user} from \"../../types/user-types\";\r\n\r\nexport const selectUserByKey = (state: AppStateType, key: string): I_user | null =>\r\n  !!state.users.users[key] ? state.users.users[key] as I_user : null;\r\n\r\nexport const selectIsEditing = (state: AppStateType, id: string): boolean =>\r\n  state.users.editingUserId === id;","import {I_user} from \"../types/user-types\";\r\nimport * as React from \"react\";\r\nimport {Button, Form, Input} from 'antd';\r\nimport './common/common.css';\r\nimport {newUserId} from \"../redux/users/reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {onUserUpdate} from \"../redux/users/actions\";\r\n\r\ninterface UserFormProps {\r\n  user?: I_user\r\n}\r\n\r\nconst UserForm: React.FC<UserFormProps> = ({user}) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const onFinish = (values: any) => {\r\n    dispatch(onUserUpdate({\r\n      id: user ? user.id : newUserId,\r\n      ...values\r\n    }));\r\n    console.log('Success:', values);\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo: any) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n  return (\r\n    <Form\r\n      className=\"row\"\r\n      name=\"user\"\r\n      initialValues={user ? user : {}}\r\n      onFinish={onFinish}\r\n      onFinishFailed={onFinishFailed}\r\n    >\r\n      <Form.Item\r\n        name=\"name\"\r\n        rules={[{required: true, message: 'Please input your username!'}]}\r\n      >\r\n        <Input placeholder=\"Username\"/>\r\n      </Form.Item>\r\n\r\n      <Form.Item\r\n        name=\"phone\"\r\n        rules={[{required: true, message: 'Please input your phone!'}]}\r\n      >\r\n        <Input placeholder=\"Phone\"/>\r\n      </Form.Item>\r\n\r\n      <Form.Item>\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  )\r\n};\r\n\r\nexport default UserForm;","import * as React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/store\";\r\nimport {UserOutlined, DeleteOutlined, CloseCircleOutlined} from '@ant-design/icons';\r\nimport {selectIsEditing, selectUserByKey} from \"../redux/users/selectors\";\r\nimport UserForm from \"./UserForm\";\r\nimport './userList.css';\r\nimport {useCallback} from \"react\";\r\nimport {onUserDelete, setEditingUser} from \"../redux/users/actions\";\r\n\r\ninterface UserProps {\r\n  userId: string\r\n}\r\n\r\nconst User: React.FC<UserProps> = ({userId}) => {\r\n  const {user, isEditing} = useSelector((state:AppStateType) =>\r\n    ({\r\n      user: selectUserByKey(state, userId),\r\n      isEditing: selectIsEditing(state, userId)\r\n    }));\r\n  const dispatch = useDispatch();\r\n\r\n  const setEditing = useCallback(() => {\r\n    dispatch(setEditingUser(isEditing ? null : userId))\r\n  }, [isEditing]);\r\n\r\n  const deleteItem = useCallback(() => {\r\n      dispatch(onUserDelete(userId))\r\n    }, [isEditing]);\r\n\r\n  return !user ? null : isEditing ? (\r\n    <div className=\"user-item-wrapper\">\r\n      <UserForm user={user} />\r\n      <CloseCircleOutlined onClick={setEditing} className=\"fixed-delete-button\" />\r\n    </div>\r\n  ) : (\r\n    <div className=\"user-item-wrapper\">\r\n      <UserOutlined className=\"user-info-icon\"/>\r\n      <div className=\"row user-info\" onDoubleClick={setEditing}>\r\n        <span>\r\n          <small style={{margin: '0 1rem'}}>Name:</small>\r\n          {user.name}\r\n        </span>\r\n        <span>\r\n        <small style={{margin: '0 1rem'}}>Phone:</small>\r\n        {user.phone}\r\n      </span>\r\n      </div>\r\n\r\n      <DeleteOutlined style={{color: \"#ff0000\"}} onClick={deleteItem} className=\"fixed-delete-button\"/>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default User;","import * as React from \"react\";\r\nimport User from \"./User\";\r\nimport UserForm from \"./UserForm\";\r\nimport './userList.css';\r\n\r\ninterface UsersProps {\r\n  userIds: string[]\r\n}\r\n\r\n// @react-firebase/database firebase\r\n\r\nconst UserList: React.FC<UsersProps> = ({userIds}) => {\r\n  return (\r\n    <div className=\"user-list-page\">\r\n      <div style={{padding: '20px'}}>\r\n        <h2>Add new user.</h2>\r\n        <UserForm />\r\n      </div>\r\n      <div className=\"user-list-wrapper\">\r\n        {userIds.map(id => <User userId={id}/>)}\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default UserList;","import * as React from \"react\";\r\nimport {Button, PageHeader} from \"antd\";\r\nimport './Header.css';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass Header extends React.Component {\r\n    render() {\r\n        return (\r\n            <PageHeader\r\n                className=\"site-page-header-responsive\"\r\n                extra={[\r\n                    <Link to='/users' key=\"1\">\r\n                      <Button type=\"text\" style={{color: '#fff'}}>\r\n                        Users\r\n                      </Button>\r\n                    </Link>,\r\n                    <Link to='/stars' key=\"1\">\r\n                      <Button type=\"text\" style={{color: '#fff'}}>\r\n                        Stars\r\n                      </Button>\r\n                    </Link>,\r\n\r\n                ]}\r\n                style={{backgroundColor: '#00334E'}}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport {Redirect, Route, RouteComponentProps, Switch, withRouter} from \"react-router\";\r\nimport {connect} from \"react-redux\";\r\nimport UserList from \"./components/UserList\";\r\nimport {selectErrorByKey, selectFetchingByKey} from \"./redux/app/selectors\";\r\nimport {AppStateType} from \"./redux/store\";\r\nimport Header from \"./components/Header/Header\";\r\nimport {fetchUsers} from \"./redux/users/actions\";\r\n\r\ninterface I_props {\r\n}\r\n\r\ninterface I_connectedProps {\r\n  usersIds: string[]\r\n  error: { message: string } | null\r\n  isFetching: boolean\r\n}\r\n\r\ninterface I_dispatchedProps {\r\n  fetchUsers: () => void\r\n}\r\n\r\ninterface I_MainProps extends I_props, I_connectedProps, I_dispatchedProps, RouteComponentProps<{}> {\r\n}\r\n\r\ninterface I_MainState {\r\n  mounted: boolean\r\n}\r\n\r\nclass Main extends Component<I_MainProps, I_MainState> {\r\n  constructor(props: I_MainProps) {\r\n    super(props);\r\n    this.state = {\r\n      mounted: false\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.fetchUsers();\r\n  }\r\n\r\n  render() {\r\n    let {usersIds} = this.props;\r\n    return (\r\n      <div className={\"main-wrapper\"}>\r\n        <main>\r\n          <Header/>\r\n          <div className={\"content-wrapper\"}>\r\n            <Switch>\r\n              <Route exact path=\"/\"\r\n                     render={() => <Redirect to={\"/users\"}/>}/>\r\n\r\n              <Route\r\n                path=\"/users\"\r\n                component={() => (\r\n                  <UserList userIds={usersIds}/>\r\n                )}\r\n              />\r\n\r\n              <Route path=\"*\" render={() => <div>Error 404</div>}/>\r\n            </Switch>\r\n          </div>\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): I_connectedProps => {\r\n  return {\r\n    usersIds: state.users.usersIds,\r\n    error: selectErrorByKey(state, 'fetchUsers'),\r\n    isFetching: selectFetchingByKey(state, 'fetchUsers'),\r\n  }\r\n};\r\n\r\nlet ComposedComponent = connect(\r\n  mapStateToProps, {fetchUsers}\r\n)(Main);\r\n\r\nexport default withRouter(ComposedComponent);","import React from 'react';\nimport './App.css';\nimport {HashRouter as Router} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\nimport Main from \"./Main\";\n\nrequire('./index.less');\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <Provider store={store}>\n        <Main/>\n      </Provider>\n    </Router>\n  );\n};\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nrequire('./index.less');\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}